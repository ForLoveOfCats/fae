// Important note: This is not how error handling is intended to be done in Fae
// This is a contrived program intended to test generic enums

fn divide(value=: i32, by=: i32): Enum<i32, str> {
	if by == 0 => return .Error("Divide by zero")
	return Enum<i32, str>.Ok(value / by)
}

fn main() {
	match divide(4, 0) {
		result: Ok {
			println(f"{result}")
		}

		error: Error => print_error<i32>(error)
	}

	let result = divide(4, 0)
	if result is Ok {
		println(f"{result}")
	} else if result is error: Error {
		print_error<i32>(error)
	}

	match divide(4, 2) {
		result: Ok {
			println(f"{result}")
		}

		error: Error => print_error<i32>(error)
	}

	let result = divide(4, 2)
	if result is Ok {
		println(f"{result}")
	} else if result is error: Error {
		print_error<i32>(error)
	}
}

generic T, E
enum Enum {
	Ok(T)
	Error(E)
}

generic T
fn print_error(arg=: str) {
	println(f"Error: {arg}")
}
