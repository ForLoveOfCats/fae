import fae::stdout::print_i64, print_u64, print_f32, print_f64, print_string, print_newline

fn main() {
	signed()
	unsigned()
	float()
	double()
}

fn print_signed(value: i64) {
	print_i64(value)
	print_newline()
}

fn signed() {
	print_string("Signed binary operations\n")
	mut signed: i64 = 5
	print_signed(signed) // 5

	signed = signed + 1
	print_signed(signed) // 6

	signed += 2
	print_signed(signed) // 8

	signed = signed - 4
	print_signed(signed) // 4

	signed -= 10
	print_signed(signed) // -6

	signed = signed * 18
	print_signed(signed) // -108

	signed *= 4
	print_signed(signed) // -432

	signed = signed / 3
	print_signed(signed) // -144

	signed /= 4
	print_signed(signed) // -36

	signed = signed % 20
	print_signed(signed) // 4

	signed = -16
	print_signed(signed) // -16

	signed %= 12
	print_signed(signed) // 8

	signed = signed << 5
	print_signed(signed) // 256

	signed <<= 2
	print_signed(signed) // 1024

	signed = -signed
	print_signed(signed) // -1024

	signed = signed >> 3
	print_signed(signed) // -128

	signed >>= 2
	print_signed(signed) // -32

	signed = signed & 255
	print_signed(signed) // 224

	signed &= 112
	print_signed(signed) // 96

	signed = signed | 7
	print_signed(signed) // 103

	signed |= 152
	print_signed(signed) // 255

	signed = signed ^ 1023
	print_signed(signed) // 768

	signed ^= 769
	print_signed(signed) // 1
}

fn print_unsigned(value: u64) {
	print_u64(value)
	print_newline()
}

fn unsigned() {
	print_string("\nUnsigned binary operations\n")
	mut unsigned: u64 = 8
	print_unsigned(unsigned) // 8

	unsigned = unsigned + 1
	print_unsigned(unsigned) // 9

	unsigned += 2
	print_unsigned(unsigned) // 11

	unsigned = unsigned - 1
	print_unsigned(unsigned) // 10

	unsigned -= 3
	print_unsigned(unsigned) // 7

	unsigned = unsigned * 18
	print_unsigned(unsigned) // 126

	unsigned *= 4
	print_unsigned(unsigned) // 504

	unsigned = unsigned / 2
	print_unsigned(unsigned) // 252

	unsigned /= 4
	print_unsigned(unsigned) // 63

	unsigned = unsigned % 40
	print_unsigned(unsigned) // 23

	unsigned %= 12
	print_unsigned(unsigned) // 11

	unsigned = unsigned << 5
	print_unsigned(unsigned) // 352

	unsigned <<= 2
	print_unsigned(unsigned) // 1408

	unsigned = unsigned >> 3
	print_unsigned(unsigned) // 176

	unsigned >>= 2
	print_unsigned(unsigned) // 44

	unsigned = unsigned & 14
	print_unsigned(unsigned) // 12

	unsigned &= 6
	print_unsigned(unsigned) // 4

	unsigned = unsigned | 192
	print_unsigned(unsigned) // 196

	unsigned |= 240
	print_unsigned(unsigned) // 244

	unsigned = unsigned ^ 255
	print_unsigned(unsigned) // 11

	unsigned ^= 31
	print_unsigned(unsigned) // 20
}

fn print_float(value: f32) {
	print_f32(value)
	print_newline()
}

fn float() {
	print_string("\nFloat binary operations\n")
	mut float: f32 = 7.5
	print_float(float) // 7.5

	float = float + 1.25
	print_float(float) // 8.75

	float = float - 4.5
	print_float(float) // 4.25

	float = float * 88
	print_float(float) // 374

	float = float / 8
	print_float(float) // 46.75

	float = 7.5
	print_float(float) // 7.5

	float += 1.25
	print_float(float) // 8.75

	float -= 4.5
	print_float(float) // 4.25

	float *= 88
	print_float(float) // 374

	float /= 8
	print_float(float) // 46.75
}

fn print_double(value: f64) {
	print_f64(value)
	print_newline()
}

fn double() {
	print_string("\nDouble binary operations\n")
	mut double: f64 = 7.5
	print_double(double) // 7.5

	double = double + 1.25
	print_double(double) // 8.75

	double = double - 4.5
	print_double(double) // 4.25

	double = double * 88
	print_double(double) // 374

	double = double / 8
	print_double(double) // 46.75

	double = 7.5
	print_double(double) // 7.5

	double += 1.25
	print_double(double) // 8.75

	double -= 4.5
	print_double(double) // 4.25

	double *= 88
	print_double(double) // 374

	double /= 8
	print_double(double) // 46.75
}
