fn main() {
	let a: Enum = .A
	let b: Enum = .B
	let c: Enum = .C { something: b'A' }
	let d: Enum = .D { another: 8.5 }

	dump_enum(a)
	dump_enum(b)
	dump_enum(c)
	dump_enum(d)

	println("")

	dump_enum(.A)
	dump_enum(.B)
	dump_enum(.C { something: b'B' })
	dump_enum(.D { another: 9.9 })

	println("")

	mut value = Struct {
		first: .B
		second: -32
		third: .C { something: b'C' }
	}
	dump_enum(value.first)
	println(f"{value.second}")
	dump_enum(value.third)

	println("")

	value.update_enum(.A)
	dump_enum(value.first)
	println(f"{value.second}")
	dump_enum(value.third)
	value.first = .B
	dump_enum(value.first)

	value.first = if true => yield .A
	else => yield .B
	dump_enum(value.first)

	println("")

	value = Struct.new(.D { another: 6.4 }, -8)
	dump_enum(value.first)
	println(f"{value.second}")
	dump_enum(value.third)

	println("")

	let other: OtherEnum = .Variant { shared: .A, unshared: .B }
	dump_enum(other.shared)
	if other is Variant => dump_enum(other.unshared)

	println("")

	let value: Enum = if false => yield .A
	else => yield .B
	dump_enum(value)
}

fn dump_enum(arg=: Enum) {
	match arg {
		A => println("A")

		B => println("B")

		C {
			println(f"C: {arg.something}")
		}

		D {
			println(f"D: {arg.another}")
		}
	}
}

enum Enum {
	A
	B
	C { something: u8 }
	D { another: f64 }
}

struct Struct {
	first: Enum
	second: i32
	third: Enum
}

method static Struct
fn new(enums=: Enum, second=: i32): Struct {
	return Struct {
		first: enums
		second
		third: enums
	}
}

method mut Struct
fn update_enum(arg=: Enum) {
	self.first = arg
	self.third = arg
}

enum OtherEnum {
	shared: Enum

	Variant { unshared: Enum }
}
