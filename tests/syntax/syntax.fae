import fae::stdout::print_string, print_newline

struct MyType {
	a: i32
	//commented_a: T
	b: f64
	//commented_b: T
}

struct EmptyA {
}

struct EmptyB {}

fn takes_empty(empty: EmptyA): bool {
	return true
}

struct HasBool {
	field: bool
}

const STRING = "Hi there"

fn main() {
	let a = "This is a string\n"
	let b: []u8 = "\"This is a string\""

	mut c = MyType { a: 5, b: 6 }
	c.a = 7
	let c_b = c.b
	c = MyType { a: 5, b: 6, }
	c = MyType {
		a: 7,
		b: 8,
	}
	c = MyType {
		a: 7
		b: 8
	}

	{
		c.b = 55
	}

	if true {
		print_string("In true if\n")
	}

	if false {
		print_string("In false if\n")
	}

	if (HasBool { field: true }.field) {
		print_string("In struct true if\n")
	}
	
	if (HasBool { field: false }.field) {
		print_string("In struct false if\n")
	}

	if takes_empty(EmptyA {}) {
		print_string("In function if\n")
	}

	let d: u64 = generic_function<u64>(54)

	let ptr: &u8 = STRING.pointer
	let len: i64 = STRING.len
	print_string(STRING)
	print_newline()
}

generic T
fn generic_function(arg: T): T {
	return arg
}
