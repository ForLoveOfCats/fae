import fae::stdout::print_u8, print_u16, print_i32, print_i64, print_f32, print_f64, print_string, print_newline, print_isize

fn main() {
	let first: HasShared = HasShared.VariantA {
		a: 2
		b: 3.4
		c: "First"
		d: 16
		e: 300
	 }

	let second: HasShared = HasShared.VariantB {
		a: 3
		b: 8.1
		c: "Second"
		d: 2.25
		e: -300
	}

	print_string("Sizes:\n")
	print_isize(size_of<HasShared>())
	print_newline()
	print_isize(size_of<HasShared.VariantA>())
	print_newline()
	print_isize(size_of<HasShared.VariantB>())
	print_newline()
	print_newline()

	print_string("Tags:\n")
	print_u8(first.tag)
	print_newline()
	print_u8(second.tag)
	print_newline()

	print_newline()

	print_string("a:\n")
	print_i32(first.a)
	print_newline()
	print_i32(second.a)
	print_newline()

	print_newline()

	print_string("b:\n")
	print_f64(first.b)
	print_newline()
	print_f64(second.b)
	print_newline()

	print_newline()

	print_string("c:\n")
	print_string(first.c)
	print_newline()
	print_string(second.c)
	print_newline()

	print_newline()
	function(first.&)
	print_newline()
	function(second.&)
}

fn function(arg: &HasShared) {
	if arg is VariantA {
		print_string("Variant A fields:\n")

		print_i32(arg.a)
		print_newline()

		print_f64(arg.b)
		print_newline()

		print_string(arg.c)
		print_newline()

		print_u8(arg.d)
		print_newline()

		print_u16(arg.e)
		print_newline()
	} else if arg is VariantB {
		print_string("Variant B fields:\n")

		print_i32(arg.a)
		print_newline()

		print_f64(arg.b)
		print_newline()

		print_string(arg.c)
		print_newline()

		print_f32(arg.d)
		print_newline()

		print_i64(arg.e)
		print_newline()
	}
}

enum HasShared {
	a: i32
	b: f64
	c: []u8

	VariantA {
		d: u8
		e: u16
	}

	VariantB {
		d: f32
		e: i64
	}
}
