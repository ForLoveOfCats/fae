fn main() {
	let first: HasShared = HasShared.VariantA {
		a: 2
		b: 3.4
		c: "First"
		d: 16
		e: 300
	 }

	let second: HasShared = HasShared.VariantB {
		a: 3
		b: 8.1
		c: "Second"
		d: 2.25
		e: -300
	}

	println("Sizes:")
	println(f"{size_of<HasShared>()}")
	println(f"{size_of<HasShared::VariantA>()}")
	println(f"{size_of<HasShared::VariantB>()}")

	println("")

	println("Tags:")
	println(f"{first.tag}")
	println(f"{second.tag}")

	println("")

	println("a:")
	println(f"{first.a}")
	println(f"{second.a}")

	println("")

	println("b:")
	println(f"{first.b}")
	println(f"{second.b}")

	println("")

	println("c:")
	println(first.c)
	println(second.c)

	println("")
	function(first.&)
	println("")
	function(second.&)
}

fn function(arg: *HasShared) {
	if arg is VariantA {
		println("Variant A fields:")
		println(f"{arg.a}")
		println(f"{arg.b}")
		println(arg.c)
		println(f"{arg.d}")
		println(f"{arg.e}")
	} else if arg is VariantB {
		println("Variant B fields:")
		println(f"{arg.a}")
		println(f"{arg.b}")
		println(arg.c)
		println(f"{arg.d}")
		println(f"{arg.e}")
	}
}

enum HasShared {
	a: i32
	b: f64
	c: str

	VariantA {
		d: u8
		e: u16
	}

	VariantB {
		d: f32
		e: i64
	}
}
