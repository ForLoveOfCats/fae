import fae.intrinsics.create_slice_mut, create_str_mut
import fae.intrinsics.create_non_null_invalid_pointer, create_non_null_invalid_slice
import fae.libc.calloc, memcpy, memmove, memset

generic T
fn swap(a=: *mut T, b=: *mut T) {
	let temp = b.*
	b.* = a.*
	a.* = temp
}

generic T
fn allocate_space(): *mut T {
	if size_of<T>() <= 0 {
		return create_non_null_invalid_pointer<T>()
	}

	let size = size_of<T>().(usize)
	return calloc(count: 1, size).(*mut T)
}

generic T
fn allocate_copied(source=: *T): *mut T {
	if size_of<T>() <= 0 {
		return create_non_null_invalid_pointer<T>()
	}

	let size = size_of<T>().(usize)
	let pointer = calloc(count: 1, size)
	memcpy(destination: pointer, source: source.(*u8), size)
	return pointer.(*mut T)
}

generic T
fn allocate_moved(source=: T): *mut T {
	if size_of<T>() <= 0 {
		return create_non_null_invalid_pointer<T>()
	}

	let size = size_of<T>().(usize)
	let pointer = calloc(count: 1, size)
	memcpy(destination: pointer, source: source.&.(*u8), size)
	return pointer.(*mut T)
}

generic T
fn allocate_region(length: isize): *mut T {
	assertf(length > 0, f"length: {length}")
	if size_of<T>() <= 0 {
		return create_non_null_invalid_pointer<T>()
	}

	let size = (size_of<T>() * length).(usize)
	return fae.libc.calloc(count: 1, size).(*mut T)
}

generic T
fn reallocate_region(pointer=: *mut *mut T, old_length: isize, new_length: isize) {
	assertf(old_length >= 0, f"old_length: {old_length}")
	assertf(new_length > 0, f"new_length: {new_length}")
	assertf(old_length <= new_length, f"old_length: {old_length}, new_length: {new_length}")
	if size_of<T>() <= 0 => return

	let new_size = (size_of<T>() * new_length).(usize)
	let result = fae.libc.realloc(pointer.*.(*mut u8), new_size)

	let added_start = offset_pointer_mut<u8>(result, by_bytes: size_of<T>() * old_length)
	let added_length = (new_length - old_length).(usize)
	memset(destination: added_start, value: 0, size: added_length)

	pointer.* = result.(*mut T)
}

generic T
fn free(pointer=: *T) {
	if size_of<T>() <= 0 => return
	fae.libc.free(pointer.(*u8))
}

generic T
fn allocate_slice_space(length: isize): []mut T {
	if size_of<T>() <= 0 {
		return create_non_null_invalid_slice<T>(length)
	}

	let size = (size_of<T>() * length).(usize)
	let pointer = calloc(count: 1, size)
	return create_slice_mut<T>(pointer.(*mut T), length)
}

generic T
fn allocate_slice_filled(length: isize, value: T): []mut T {
	let slice = allocate_slice_space<T>(length)
	for ptr of slice => ptr.* = value
	return slice
}

generic T
fn allocate_slice_copied(source=: []T): []mut T {
	if size_of<T>() <= 0 {
		return create_non_null_invalid_slice<T>(length: source.length)
	}

	let size = (size_of<T>() * source.length).(usize)
	let pointer = calloc(count: 1, size)
	memcpy(destination: pointer, source: source.pointer.(*u8), size)
	return create_slice_mut<T>(pointer.(*mut T), length: source.length)
}

generic T
fn reallocate_slice(source=: *mut []mut T, old_length: isize, new_length: isize) {
	if size_of<T>() <= 0 => return
	if new_length == source.length => return

	// as reallocate_region checks assertions we need not check the values here
	reallocate_region<T>(source.pointer.&mut, old_length, new_length)
	source.length = new_length
}

generic T
fn free_slice(slice=: []T) {
	if size_of<T>() <= 0 => return
	free<T>(slice.pointer)
}

fn allocate_str_copied(source=: str): str {
	return allocate_str_mut_copied(source)
}

fn allocate_str_mut_copied(source=: str): strmut {
	let size = source.length.(usize)
	let pointer = calloc(count: 1, size)
	memcpy(destination: pointer, source: source.pointer, size)
	return create_str_mut(pointer, length: source.length)
}

fn reallocate_str_mut(source=: *mut strmut, old_length: isize, new_length: isize) {
	if new_length == source.length => return

	// as reallocate_region checks assertions we need not check the values here
	reallocate_region<u8>(source.bytes.pointer.&mut, old_length, new_length)
	source.length = new_length
}

fn free_str(string=: str) {
	free<u8>(string.pointer)
}

generic T
fn set_slice_bytes(destination: []mut T, value: u8) {
	let byte_count = destination.length * size_of<T>()
	memset(destination: destination.pointer.(*mut u8), value, size: byte_count.(usize))
}

generic T
fn copy_slice_nonoverlapping(source: []T, destination: []mut T) {
	let message = f"source length {source.length} greater than destination length {destination.length}"
	assertf(destination.length >= source.length, message)
	if size_of<T>() <= 0 => return

	let size = (size_of<T>() * source.length).(usize)
	memcpy(destination: destination.pointer.(*mut u8), source: source.pointer.(*u8), size)
}

generic T
fn copy_slice_overlapping(source: []T, destination: []mut T) {
	let message = f"source length {source.length} greater than destination length {destination.length}"
	assertf(destination.length >= source.length, message)
	if size_of<T>() <= 0 => return

	let size = (size_of<T>() * source.length).(usize)
	memmove(destination: destination.pointer.(*mut u8), source: source.pointer.(*u8), size)
}
