import fae::stdout::print_u8, print_i32, print_f64, print_string, print_newline

fn main() {
	let a: Enum = .Something
	let b = .WhoKnows

	dump_enum(.Blah)

	mut value = Struct {
		first: .Nope
		second: -32
		third: .Another
	}

	value.update_enum(.NonExistant)

	value = Struct.new(.Abc { another: 6.4 }, -8)

	let other: OtherEnum = .Variant { shared: .A, unshared: .Nope }
}

fn dump_enum(arg: Enum) {
	match arg {
		A => print_string("A\n")

		B => print_string("B\n")

		C {
			print_string("C: ")
			print_u8(arg.something)
			print_newline()
		}

		D {
			print_string("D: ")
			print_f64(arg.another)
			print_newline()
		}
	}
}

enum Enum {
	A
	B
	C { something: u8 }
	D { another: f64 }
}

struct Struct {
	first: Enum
	second: i32
	third: Enum
}

method static Struct
fn new(enums: Enum, second: i32): Struct {
	return Struct {
		first: enums
		second
		third: enums
	}
}

method mut Struct
fn update_enum(arg: Enum) {
	self.first  = arg
	self.third = arg
}

enum OtherEnum {
	shared: Enum

	Variant { unshared: Enum }
}
