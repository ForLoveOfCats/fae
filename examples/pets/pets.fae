enum VetSpecialty {
	Mammal
	Reptile
}

enum BeenTreated {
	NotTreated
	Treated
}

enum Pet {
	name: str

	Cat
	Dog { hours_since_last_walk: i32 }
	Snake { days_since_last_feeding: i32 }
}

method Pet
fn is_mammal(): bool {
	match self {
		Cat, Dog => return true
		Snake => return false
	}
}

method Pet
fn print_is_mammal() {
	if self.is_mammal() => println(f"{self.name} is a mammal")
	else => println(f"{self.name} is not a mammal")
}

method mut Pet
fn visit_vet(specialty: VetSpecialty): BeenTreated {
	println(f"{self.name} is visiting the vet")

	match self {
		Cat => if specialty is Mammal {
			println("The mammal vet is treating the cat")
			return .Treated
		}

		Dog => if specialty is Mammal {
			// Let's say the vet visit was two hours
			self.hours_since_last_walk += 2

			println("The mammal vet is treating the dog")
			return .Treated
		}

		Snake => if specialty is Reptile {
			// Pretend the vet decided to feed the snake
			self.days_since_last_feeding = 0

			println("The reptile vet is treating the snake")
			return .Treated
		}
	}

	return .NotTreated
}

method mut Pet
fn take_on_walk() {
	if self is Dog and self.hours_since_last_walk >= 2 {
		println(f"Walking a dog, it has not been walked in {self.hours_since_last_walk} hours")
		self.hours_since_last_walk = 0
	}
}

fn adopt(human_age: i32): Option<Pet> {
	if human_age < 18 => return .None
	return .Some(.Cat { name: "Mordecai" })
}

fn main() {
	mut cat: Pet = .Cat { name: "Lola" }
	mut dog: Pet = .Dog { name: "Odie", hours_since_last_walk: 3 }
	mut snake: Pet = .Snake { name: "Mort", days_since_last_feeding: 5 }

	cat.take_on_walk()
	dog.take_on_walk()
	snake.take_on_walk()

	println("")

	if cat.visit_vet(specialty: .Mammal) is NotTreated {
		println("The cat has not been treated")
	}

	println("")

	if dog.visit_vet(specialty: .Mammal) is NotTreated {
		println("The dog has not been treated")
	}

	println("")

	if snake.visit_vet(specialty: .Mammal) is NotTreated {
		println("The snake has not been treated")
	}

	println("")

	cat.take_on_walk()
	dog.take_on_walk()
	snake.take_on_walk()

	println("")

	cat.print_is_mammal()
	dog.print_is_mammal()
	snake.print_is_mammal()

	println("")

	if cat is Dog, Snake => println("This is a dog or a snake")
	else => println("This is not a dog nor a snake")

	println("")

	match snake {
		Dog => println("This is a dog")
		else => println("This is something other than a dog")
	}

	println("")

	let morty = adopt(human_age: 25)
	println(morty.unwrap().name)

	// let morty = adopt(17)
	// println(morty.unwrap().name)
}
