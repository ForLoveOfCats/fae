import fae::libc::printf, fflush, fwrite, StdOutFile

fn print_clear() {
	let string = [27.(u8), 91, 50, 74, 0]
	fwrite(string.pointer, 1, string.length.(usize), StdOutFile.*)
	fflush(StdOutFile.*)
}

fn print_string(text: str) {
	fwrite(text.pointer, 1, text.length.(usize), StdOutFile.*)
	fflush(StdOutFile.*)
}

fn print_newline() {
	printf("\n\0".pointer)
	fflush(StdOutFile.*)
}

fn print_bool(arg: bool) {
	if arg => print_string("true")
	else => print_string("false")
}

fn print_i8(arg: i8) {
	printf("%hhd\0".pointer, arg)
	fflush(StdOutFile.*)
}

fn print_i16(arg: i16) {
	printf("%hd\0".pointer, arg)
	fflush(StdOutFile.*)
}

fn print_i32(arg: i32) {
	printf("%d\0".pointer, arg)
	fflush(StdOutFile.*)
}

fn print_i64(arg: i64) {
	printf("%ld\0".pointer, arg)
	fflush(StdOutFile.*)
}

fn print_u8(arg: u8) {
	printf("%hu\0".pointer, arg)
	fflush(StdOutFile.*)
}

fn print_u16(arg: u16) {
	printf("%hu\0".pointer, arg)
	fflush(StdOutFile.*)
}

fn print_u32(arg: u32) {
	printf("%u\0".pointer, arg)
	fflush(StdOutFile.*)
}

fn print_u64(arg: u64) {
	printf("%lu\0".pointer, arg)
	fflush(StdOutFile.*)
}

fn print_isize(arg: isize) {
	printf("%ld\0".pointer, arg)
	fflush(StdOutFile.*)
}

fn print_usize(arg: usize) {
	printf("%lu\0".pointer, arg)
	fflush(StdOutFile.*)
}

generic T
fn print_pointer(arg: &T) {
	printf("%ld\0".pointer, arg.(usize))
	fflush(StdOutFile.*)
}

fn print_f32(arg: f32) {
	printf("%f\0".pointer, arg)
	fflush(StdOutFile.*)
}

fn print_f64(arg: f64) {
	printf("%f\0".pointer, arg)
	fflush(StdOutFile.*)
}
