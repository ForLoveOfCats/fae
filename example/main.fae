generic T
fn a_before(arg: T): T {
	return b_after[T](arg)
}

generic T
fn b_before(arg: T): T {
	return arg
}

const A = 8
const GREETING = "Hello there"

fn main(): void {
	// TODO: Better display multi-line spans
	// TODO: Handle nested multi-line comments
	// TODO: Validate assignment mutability
	// TODO: Handle when return expression fails to validate rather than omiting the return

	a_before[u64](A + 5)
	a_before[&[u8]](GREETING)
	a_before[f64](4.2)
	a_before[f64](-4.2)

	a_after[u32](42)
	a_after[f64](4.2)
}

generic T
fn a_after(arg: T): T {
	return b_before[T](arg)
}

generic T
fn b_after(arg: T): T {
	return arg
}

