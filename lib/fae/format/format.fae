import fae.libc.FileStream, fprintf, fwrite, fflush

#lang "format_string_item_type"
enum FormatStringItem {
	I8(i8)
	I16(i16)
	I32(i32)
	I64(i64)

	U8(u8)
	U16(u16)
	U32(u32)
	U64(u64)

	Isize(isize)
	Usize(usize)

	F32(f32)
	F64(f64)

	Bool(bool)
	String(str)
	StringMut(strmut) // Unfortunate that this is a separate variant
	FormatString(fstr)
}

fn print_to_file_stream(stream: *FileStream, message: fstr) {
	fn print_fstr(stream=: *FileStream, message=: fstr) {
		for item in message.items => match item {
			I8 => fprintf(stream, "%hhd".pointer, item)
			I16 => fprintf(stream, "%hd".pointer, item)
			I32 => fprintf(stream, "%d".pointer, item)	
			I64 => fprintf(stream, "%ld".pointer, item)

			U8 => fprintf(stream, "%hhu".pointer, item)
			U16 => fprintf(stream, "%hu".pointer, item)
			U32 => fprintf(stream, "%u".pointer, item)
			U64 => fprintf(stream, "%lu".pointer, item)

			Isize => fprintf(stream, "%ld".pointer, item)
			Usize => fprintf(stream, "%lu".pointer, item)

			F32 => fprintf(stream, "%f".pointer, item)
			F64 => fprintf(stream, "%f".pointer, item)

			Bool {
				if item => fprintf(stream, "true".pointer)
				else => fprintf(stream, "false".pointer)
			}

			String => fwrite(buffer: item.pointer, item_size: 1, count: item.length.(usize), stream)
			StringMut => fwrite(buffer: item.pointer, item_size: 1, count: item.length.(usize), stream)
			FormatString => print_fstr(stream, item)
		}
	}

	print_fstr(stream, message)
	fflush(stream)
}
