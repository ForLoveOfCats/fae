using sub_folder::sub_module

const CONSTANT: &[u8] = "Hello there!"

struct NonGeneric {
	field: i64
}

generic T
struct MyStruct {
	field: f64
	other_field: T
}



generic T
fn generic_function(value: T, mut other: u64, float: f64, char: u32): T {
	return other
}

fn main(): void {
	// TODO: Validate assignment mutability
	mut variable = 2
	variable = 8 * 5 + 3 / 1
	generic_function[u64](4, variable, 9.6, 'A')
	return

	/*
	let abc = 5 * 2 + -42 / 8
	let def = 96 + { 22 }
	mut character: char = 'A'
	let reference: &i32 = something
	let slice: &[u8] = something
	let list: List[i32] = something

	character = 'B'
	let a = b

	//comment

	const SOMETHING: i64 = some::path::HERE

	let instance = MyStruct {
		field: 89,
		other_field: true,
	}

	return 5.0 * something_else()
	*/
}
