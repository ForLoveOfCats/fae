struct A {}

struct ContainsA {
	a: A
}

struct ContainsMultiple {
	first: ContainsA
	second: i32
}

fn func_a(a=: A): A {
	return a
}

fn func_b(c=: ContainsMultiple): ContainsA {
	let contains = c.first
	return contains
}

fn func_c(ptr=: *mut A) {
	ptr.* = A {}
}

fn main() {
	mut a: A = A {}
	mut b = ContainsA { a: a }
	let multiple = ContainsMultiple { first: b, second: -3 }

	b = func_b(multiple)
	b.a = A {}
	a = b.a

	println(f"{multiple.second}")

	func_c(a.&mut)

	println(f"{void == void}")
	println(f"{void != void}")
}
