import fae.libc.FileStream, fprintf, fwrite, fflush, snprintf
import fae.collections.string.String

#lang "format_string_item_type"
enum FormatStringItem {
	I8(i8)
	I16(i16)
	I32(i32)
	I64(i64)

	U8(u8)
	U16(u16)
	U32(u32)
	U64(u64)

	Isize(isize)
	Usize(usize)

	F32(f32)
	F64(f64)

	Bool(bool)
	String(str)
	StringMut(strmut) // Unfortunate that this is a separate variant
	FormatString(fstr)
}

fn print_to_file_stream(message: fstr, stream: *FileStream) {
	fn print_fstr(message=: fstr, stream=: *FileStream) {
		for item in message.items => match item {
			I8 => fprintf(stream, "%hhd".pointer, item)
			I16 => fprintf(stream, "%hd".pointer, item)
			I32 => fprintf(stream, "%d".pointer, item)	
			I64 => fprintf(stream, "%ld".pointer, item)

			U8 => fprintf(stream, "%hhu".pointer, item)
			U16 => fprintf(stream, "%hu".pointer, item)
			U32 => fprintf(stream, "%u".pointer, item)
			U64 => fprintf(stream, "%lu".pointer, item)

			Isize => fprintf(stream, "%ld".pointer, item)
			Usize => fprintf(stream, "%lu".pointer, item)

			F32 => fprintf(stream, "%g".pointer, item)
			F64 => fprintf(stream, "%g".pointer, item)

			Bool {
				if item => fprintf(stream, "true".pointer)
				else => fprintf(stream, "false".pointer)
			}

			String => fwrite(buffer: item.pointer, item_size: 1, count: item.length.(usize), stream)
			StringMut => fwrite(buffer: item.pointer, item_size: 1, count: item.length.(usize), stream)
			FormatString => print_fstr(item, stream)
		}
	}

	print_fstr(message, stream)
	fflush(stream)
}

fn print_to_string(message: fstr, buffer: *mut String) {
	const MINIMUM_BUFFER_SPACE = 32

	generic T
	fn perform_print(buffer: *mut String, format=: str, item=: T) {
		let original_length = buffer.contents.length
		let original_capacity = buffer.capacity

		if buffer.capacity - buffer.contents.length < MINIMUM_BUFFER_SPACE
			=> buffer.reserve_at_least(buffer.capacity + MINIMUM_BUFFER_SPACE)

		buffer.set_length(buffer.capacity)
		mut start = buffer.contents.bytes[original_length].&mut
		mut space = buffer.capacity - original_length
		mut needed_space = snprintf(buffer: start, size: space.(usize), format.pointer, item).(isize)
		needed_space += 1 // null terminator

		if needed_space > space {
			buffer.reserve_at_least(original_capacity + needed_space)
			buffer.set_length(buffer.capacity)

			start = buffer.contents.bytes[original_length].&mut
			space = buffer.capacity - original_length
			needed_space = snprintf(buffer: start, size: space.(usize), format.pointer, item).(isize)
			needed_space += 1 // null terminator

			assertf(needed_space <= space, f"needed_space: {needed_space}, space: {space}")
		}
	
		let added_length = needed_space - /* null terminator */ 1
		buffer.set_length(original_length + added_length)
	}

	fn print_fstr(message=: fstr, buffer=: *mut String) {
		for item in message.items => match item {
			I8 => perform_print<i64>(buffer, "%ld", item.(i64))
			I16 => perform_print<i64>(buffer, "%ld", item.(i64))
			I32 => perform_print<i64>(buffer, "%ld", item.(i64))	
			I64 => perform_print<i64>(buffer, "%ld", item)

			U8 => perform_print<u64>(buffer, "%lu", item.(u64))
			U16 => perform_print<u64>(buffer, "%lu", item.(u64))
			U32 => perform_print<u64>(buffer, "%lu", item.(u64))
			U64 => perform_print<u64>(buffer, "%lu", item)

			Isize => perform_print<isize>(buffer, "%zd", item)
			Usize => perform_print<usize>(buffer, "%zu", item)

			F32 => perform_print<f64>(buffer, "%g", item.(f64))
			F64 => perform_print<f64>(buffer, "%g", item)

			Bool {
				if item => buffer.push_str("true")
				else => buffer.push_str("false")
			}

			String => buffer.push_str(item)
			StringMut => buffer.push_str(item)
			FormatString => print_fstr(item, buffer)
		}
	}

	print_fstr(message, buffer)
}
