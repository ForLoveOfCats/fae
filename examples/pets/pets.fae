import fae::stdout::print_i32, print_string, print_newline

enum VetSpecialty {
	Cat
	Dog
}

enum BeenTreated {
	NotTreated
	Treated
}

method static BeenTreated
fn from_bool(value: bool): BeenTreated {
	if value => return BeenTreated.Treated
	else => return BeenTreated.NotTreated
}

enum Pet {
	name: []u8

	Cat
	Dog { hours_since_last_walk: i32 }
}

method mut Pet
fn visit_vet(specialty: VetSpecialty): BeenTreated {
	print_string(self.name)
	print_string(" is visiting the vet\n")

	match self {
		Cat => if specialty is Cat {
			print_string("The cat vet is treating the cat\n")
			return BeenTreated.Treated
		}

		Dog => if specialty is Dog {
			// Let's say the vet visit was two hours
			self.hours_since_last_walk += 2

			print_string("The dog vet is treating the dog\n")
			return BeenTreated.from_bool(true)
		}
	}

	return BeenTreated.NotTreated
}

method mut Pet
fn take_on_walk() {
	if self is Dog and self.hours_since_last_walk >= 2 {
		print_string("Walking a dog, it has not been walked in ")
		print_i32(self.hours_since_last_walk)
		print_string(" hours\n")
		self.hours_since_last_walk = 0
	}
}

fn main() {
	mut cat: Pet = Pet.Cat { name: "Lola" }
	mut dog: Pet = Pet.Dog { name: "Odie", hours_since_last_walk: 3 }

	cat.take_on_walk()
	dog.take_on_walk()

	if cat.visit_vet(VetSpecialty.Dog) is NotTreated {
		print_string("The cat has not been treated\n")
	}

	if dog.visit_vet(VetSpecialty.Dog) is NotTreated {
		print_string("The dog has not been treated\n")
	}

	cat.take_on_walk()
	dog.take_on_walk()
}
