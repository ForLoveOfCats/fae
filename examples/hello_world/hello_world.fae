trait Entity {
	method mut
	fn tick(context: Context<Self>)
}

generic E
struct Context {}

struct Player {}

method mut Player
fn tick(_context=: Context<Player>) {
	println("Player.tick called")
}

// generic C, T: Entity<C>
// struct EntityList {
// 	entity: T
// }

generic E: Entity
fn takes_entity(entity: *mut E, context: Context<E>) {
	entity.tick(context)
}

fn main() {
	let context = Context<Player> {}
	mut player = Player {}
	takes_entity<Player>(entity: player.&mut, context)
}
