import fae.libc.calloc

generic T
fn allocate(): *mut T {
	let size = size_of<T>().(usize)
	return calloc(count: 1, size).(*mut T)
}

generic T
fn deallocate(ptr=: *mut T) {
	fae.libc.free(ptr.(*mut u8))
}

fn takes_ptr(ptr=: *u64) {
	println(f"{ptr.*}")
}

fn main() {
	let ptr = allocate<u64>()
	ptr.* = 42
	takes_ptr(ptr.(*u64))
	deallocate<u64>(ptr)

	let null = 0.(*mut u8)
	println(f"{null.(usize)}")
}
