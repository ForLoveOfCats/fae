const StdInDescriptor: i32 = 0
const StdOutDescriptor: i32 = 1
const StdErrDescriptor: i32 = 2

when PlatformLinux {
	extern "stdin"
	static StdInFile: &FileHandle

	extern "stdout"
	static StdOutFile: &FileHandle

	extern "stderr"
	static StdErrFile: &FileHandle
} else when PlatformDarwin {
	extern "__stdinp"
	static StdInFile: &FileHandle

	extern "__stdoutp"
	static StdOutFile: &FileHandle

	extern "__stderrp"
	static StdErrFile: &FileHandle
}

struct DlInfo {
	dli_fname: &u8
	dli_fbase: &void

	dli_sname: &u8
	dli_saddr: &void
}

struct FileHandle {}

struct TimeT {
	time_t: i64
}

extern "atoi"
fn atoi(string: &u8): i32

extern "atol"
fn atol(string: &u8): i64

extern "backtrace"
fn backtrace(address_buffer: &mut &void, size: i32): i32

extern "backtrace_symbols"
fn backtrace_symbols(addresses: &&void, address_count: i32): &&u8

extern "backtrace_symbols_fd"
fn backtrace_symbols_fd(addresses: &&void, address_count: i32, fd: i32)

extern "close"
fn close(file_descriptor: i32): i32

extern "dladdr"
fn dladdr(address: &void, info: &mut DlInfo): i32

extern "exit"
fn exit(code: i32): noreturn

extern "fflush"
fn fflush(stream: &FileHandle)

extern "fprintf"
fn fprintf(stream: &FileHandle, pointer: &u8, ...)

extern "free"
fn free(ptr: &u8)

extern "fwrite"
fn fwrite(data: &u8, size: usize, count: usize, stream: &FileHandle): usize

extern "malloc"
fn malloc(size: usize): &mut u8

extern "memcpy"
fn memcpy(destination: &mut u8, source: &u8, byte_count: usize): &mut u8

extern "memmove"
fn memmove(destination: &mut u8, source: &u8, byte_count: usize): &mut u8

extern "open"
fn open(pathname: &u8, flags: i32, ...): i32

extern "printf"
fn printf(pointer: &u8, ...)

extern "puts"
fn puts(pointer: &u8)

extern "rand"
fn rand(): i32

extern "read"
fn read(fd: i32, buffer: &mut u8, count: usize): isize

extern "realloc"
fn realloc(ptr: &mut u8, new_size: usize): &mut u8

extern "srand"
fn srand(seed: u32)

extern "sqrt"
fn sqrt(arg: f64): f64

extern "strlen"
fn strlen(string: &u8): usize

extern "time"
fn time(tloc: &mut TimeT): TimeT
