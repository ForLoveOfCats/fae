generic A, B
struct Pair {
	a: A
	b: B
}

generic T
fn generic_function(one=: T, two=: T, condition=: bool): T {
	generic B
	struct Structure {
		one: T
		two: T
		other: B
	}

	method Structure
	fn select(condition=: bool): T {
		if condition {
			return self.*.one
		} else {
			return self.*.two
		}
	}

	method Structure
	fn get_other(): B {
		return self.*.other
	}

	generic U
	method Structure
	fn generic_method(arg=: U): Pair<T, U> {
		return Pair<T, U> { a: self.*.one, b: arg }
	}

	let a = Structure<i32> { one: one, two: two, other: 8 }

	println(f"{a.get_other()}")

	let pair = a.generic_method<u32>('A')
	println(f"{pair.b}")

	return a.select(condition)
}

fn main() {
	println(f"{generic_function<f64>(4.2, 6.9, true)}")
	println(f"{generic_function<f64>(4.2, 6.9, false)}")
}
