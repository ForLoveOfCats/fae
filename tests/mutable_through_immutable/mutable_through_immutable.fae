struct Struct {
	ptr: *mut i32
	slice: []mut i32
}

fn main() {
	mut value: i32 = 11
	let instance = Struct {
		ptr: value.&mut
		slice: []i32 { 22 }
	}

	let instance_ptr = instance.&
	instance.ptr.* += 1 // Valid

	// Dot access pointer auto deref
	{
		instance_ptr.ptr.* += 2 // Invalid

		let smuggled: *mut i32 = {
			yield instance_ptr.ptr // Invalid
		}
		smuggled.* += 3
	}

	// Dot access pointer manual deref
	{
		instance_ptr.*.ptr.* += 4 // Invalid 

		let smuggled: *mut i32 = {
			yield instance_ptr.*.ptr // Invalid
		}
		smuggled.* += 5
	}

	// Dot access targetting slice
	{
		instance.slice[0] += 1 // Valid

		instance_ptr.slice[0] += 2 // Invalid

		let smuggled: []mut i32 = {
			yield instance_ptr.slice // Invalid
		}
		smuggled[0] += 3
	}

	// Access through immutable slice
	{
		let slice: []Struct = []{
			Struct {
				ptr: value.&mut
				slice: []i32 { 33 }
			}
		}

		slice[0].ptr.* += 1 // Invalid

		slice[0].slice[0] += 1 // Invalid
	}
}
