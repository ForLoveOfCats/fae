import fae.intrinsics.create_slice_mut, create_str, create_str_mut

#intrinsic
generic T
fn size_of(): isize

#intrinsic
generic T
fn alignment_of(): isize

generic T
fn null_pointer(): *mut T {
	return 0.(*mut T)
}

generic T
fn null_slice(): []mut T {
	let null = null_pointer<T>()
	return create_slice_mut<T>(null, length: 0)
}

fn null_str(): str {
	let null = null_pointer<u8>()
	return create_str(null, length: 0)
}

fn null_str_mut(): strmut {
	let null = null_pointer<u8>()
	return create_str_mut(null, length: 0)
}

generic T
fn offset_pointer(pointer=: *T, by_bytes: isize): *T {
	return (pointer.(isize) + by_bytes).(*T)
}

generic T
fn offset_pointer_mut(pointer=: *mut T, by_bytes: isize): *mut T {
	return (pointer.(isize) + by_bytes).(*mut T)
}

fn print(message=: fstr) {
	let stream = fae.libc.StdOutFile
	fae.format.print_to_file_stream(message, stream)
}

fn println(message=: fstr) {
	let stream = fae.libc.StdOutFile
	let message = f"{message}\n"
	fae.format.print_to_file_stream(message, stream)
}

fn eprint(message=: fstr) {
	let stream = fae.libc.StdErrFile
	fae.format.print_to_file_stream(message, stream)
}

fn eprintln(message=: fstr) {
	let stream = fae.libc.StdErrFile
	let message = f"{message}\n"
	fae.format.print_to_file_stream(message, stream)
}

fn panic(): noreturn {
	fae.runtime.panic_impl(message: "Explicit panic")
}

fn panicf(message=: fstr): noreturn {
	fae.runtime.panic_impl(message)
}

fn exit_success(): noreturn {
	fae.libc.exit(0)
}

fn exit_error(): noreturn {
	fae.libc.exit(-1)
}

fn exit_errorf(message=: fstr): noreturn {
	eprintln(message)
	fae.libc.exit(-1)
}

fn assert(value=: bool) {
	if value.! => panicf("Assertion failed")
}

fn assertf(value=: bool, message=: fstr) {
	if value.! => panicf(f"Assertion failed: {message}")
}

when DebugBuild {
	fn debug_assert(value=: bool) {
		if value.! => panicf("Debug assertion failed")
	}

	fn debug_assertf(value=: bool, message=: fstr) {
		if value.! => panicf(f"Debug assertion failed: {message}")
	}
} else when ReleaseBuild {
	fn debug_assert(_value=: bool) {}

	fn debug_assertf(_value=: bool, _message=: fstr) {}
}

#lang "range_type"
struct Range {
	start: isize
	end: isize
}

method Range
fn length(): isize {
	return self.end - self.start
}

method Range
fn is_empty(): bool {
	return self.start >= self.end
}

method Range
fn is_not_empty(): bool {
	return self.start < self.end
}

method Range
fn contains(index=: isize): bool {
	return self.start <= index and index < self.end
}

// TODO: This is temporary intermediate tool until there is "blessed" optional semantics
// baked into the language itself
generic T
enum Option {
	None
	Some(T)
}

method Option
fn unwrap(): T {
	match self {
		some: Some => return some
		None => panicf("Attempted to unwrap an empty Option")
	}
}
