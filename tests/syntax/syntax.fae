struct MyType {
	a: i32
	//commented_a: T
	b: f64
	//commented_b: T
}

struct EmptyA {
}

struct EmptyB {}

fn takes_empty(_=: EmptyA): bool {
	return true
}

struct HasBool {
	field: bool
}

const STRING = "Hi there"

fn main() {
	let _ = "This is a string\n"
	let _: str = "\"This is a string\""

	mut c = MyType { a: 5, b: 6 }
	c.a = 7
	let _c_b = c.b
	c = MyType { a: 5, b: 6, }
	c = MyType {
		a: 7,
		b: 8,
	}
	c = MyType {
		a: 7
		b: 8
	}

	{
		c.b = 55
	}

	println(f"{'A'}")
	println(f"{'â„’'}")
	println(f"{b'D'}")

	if true {
		println("In true if")
	}

	if false {
		println("In false if")
	}

	if (HasBool { field: true }.field) {
		println("In struct true if")
	}
	
	if (HasBool { field: false }.field) {
		println("In struct false if")
	}

	if takes_empty(EmptyA {}) {
		println("In function if")
	}

	let _: u64 = generic_function<u64>(54)

	let _ptr: *u8 = STRING.pointer
	let _len: isize = STRING.length
	println(STRING)
}

generic T
fn generic_function(arg=: T): T {
	return arg
}
